using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif
using VContainer;

public sealed class SignalDebugEmitter : MonoBehaviour
{
    [SerializeField] private string signal = "RadiometerAssembled";

    [Tooltip("–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî Emit –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Play Mode (–¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏).")]
    [SerializeField] private bool emitOnStart = false;

    [Inject] private SceneSignalHub _sceneSignalHub;
    [Inject] private ScenarioSignalHub _scenarioSignalHub;
    private void Start()
    {
        if (emitOnStart)
            EmitSignal();
    }

    public void EmitSignal()
    {
        if (_sceneSignalHub == null)
        {
            Debug.LogWarning("[SignalDebugEmitter] SignalHub –Ω–µ –≤–Ω–µ–¥—Ä—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π DI –∏–ª–∏ SetSignalHub().");
            return;
        }

        _sceneSignalHub.EmitAll(signal);
        _scenarioSignalHub.Emit(signal);
    }

}

#if UNITY_EDITOR
[CustomEditor(typeof(SignalDebugEmitter))]
public class SignalDebugEmitterEditor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();

        var emitter = (SignalDebugEmitter)target;
        GUILayout.Space(10);

        if (Application.isPlaying)
        {
            if (GUILayout.Button("üì° Emit Signal Now", GUILayout.Height(32)))
            {
                emitter.EmitSignal();
            }
        }
        else
        {
            EditorGUILayout.HelpBox("–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Play Mode.", MessageType.Info);
        }
    }
}
#endif